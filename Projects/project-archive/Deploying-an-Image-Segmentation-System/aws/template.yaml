AWSTemplateFormatVersion: "2010-09-09"
Description: Sample template to be used as the basis of all project templates.

Parameters:
  ProjectUser:
    Type: String
    Description: The IAM user undertaking the project.
  BucketName:
    Type: String
    Description: The name of the bucket containing the project resources.
  KeyPairName:
    Type: String
    Description: The name of the SSH Keypair to use for all EC2 instances.
  ProjectID:
    Type: String
    Description: The project_id of the project which should be created.
  UserID:
    Type: String
    Description: The user_id of the user for whom the project is being created.

Resources:
  ProjectUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !Ref ProjectUser
      PolicyName: ProjectUserPolicy
      PolicyDocument:
        Version: "2012-10-17"
        # Fill in this statement with all the permissions required for the project. Any resources tagged with access:deny will be inaccessbile to the user.
        Statement:
          - Effect: Allow
            Action:
              - "lambda:*"
            Resource: "*"
          - Action:
              - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:ListBucket
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${BucketName}
              - !Sub arn:aws:s3:::${BucketName}/BasicImageSegmentationAPI/*
              - !Sub arn:aws:s3:::${BucketName}/BasicImageSegmentationAPI/Assets/*
          - Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${DataLake}
              - !Sub arn:aws:s3:::${DataLake}/*
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"

  DataLake:
    DeletionPolicy: Delete
    Type: AWS::S3::Bucket
    Description: Creates empty S3 bucket for user
    Properties:
      BucketName: !Sub ${UserID}-data

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      RoleName: ec2s3role

  EC2IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3ec2policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"
          - Action:
              - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${DataLake}
              - !Sub arn:aws:s3:::${DataLake}/*
      Roles:
        - !Ref EC2IAMRole

  DataLakeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: s3KeyTransferLambda
    Description: Bucket policy for lambda
    Properties:
      Bucket: !Ref DataLake
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${DataLake}
              - !Sub arn:aws:s3:::${DataLake}/*
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${DataLake}
              - !Sub arn:aws:s3:::${DataLake}/*
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: o-avgoew93lc

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: DataLake
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "logs:*"
                Resource:
                  - !GetAtt DataLake.Arn
                  - !Sub arn:aws:s3:::${DataLake}/*
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}
                  - !Sub arn:aws:s3:::${BucketName}/*

  s3KeyTransferLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - DataLake
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: s3KeyTransfer
      Environment:
        Variables:
          OriginBucket: !Ref BucketName
          DestinationBucket: !Ref DataLake
          ProjectID: !Ref ProjectID
          UserID: !Ref UserID
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import cfnresponse
          dest_bucket = os.environ.get('DestinationBucket')
          origin_bucket = os.environ.get('OriginBucket')
          user_id = os.environ.get('UserID')
          project_id = os.environ.get('ProjectID')
          s3 = boto3.resource('s3')

          def empty_delete_buckets(bucket_name):
              """
              Empties and deletes the bucket
              :param bucket_name:
              :param region:
              :return:
              """
              print(f"trying to delete the bucket {bucket_name}")
              s3_client = boto3.client('s3')
              s3_resource = boto3.resource('s3')
              try:
                  bucket = s3_resource.Bucket(bucket_name).load()
              except ClientError:
                  print(f"bucket {bucket_name} does not exist")
                  return
              # Check if versioning is enabled
              response = s3_client.get_bucket_versioning(Bucket=bucket_name)
              status = response.get('Status','')
              if status == 'Enabled':
                  response = s3_client.put_bucket_versioning(Bucket=bucket_name,
                                                             VersioningConfiguration={'Status': 'Suspended'})
              paginator = s3_client.get_paginator('list_object_versions')
              page_iterator = paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  print(page)
                  if 'DeleteMarkers' in page:
                      delete_markers = page['DeleteMarkers']
                      if delete_markers is not None:
                          for delete_marker in delete_markers:
                              key = delete_marker['Key']
                              versionId = delete_marker['VersionId']
                              s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
                  if 'Versions' in page and page['Versions'] is not None:
                      versions = page['Versions']
                      for version in versions:
                          print(version)
                          key = version['Key']
                          versionId = version['VersionId']
                          s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)
              object_paginator = s3_client.get_paginator('list_objects_v2')
              page_iterator = object_paginator.paginate(
                  Bucket=bucket_name
              )
              for page in page_iterator:
                  if 'Contents' in page:
                      for content in page['Contents']:
                          key = content['Key']
                          s3_client.delete_object(Bucket=bucket_name, Key=content['Key'])
              print("Successfully emptied the bucket")

          def lambda_handler(event, context):
            print("request received:" + json.dumps(event))
            print(event["RequestType"])
            bucket = s3.Bucket(origin_bucket)
            new_bucket = s3.Bucket(dest_bucket)
            try:
              if event["RequestType"] == "Delete":
                empty_delete_buckets(dest_bucket)
                send_cfn_response(event, context, cfnresponse.SUCCESS)
              else:
                for obj in bucket.objects.filter(Prefix=f"keys/{user_id}_{project_id}.pem"):
                  dest_key = obj.key
                  s3.Object(dest_bucket, dest_key).copy_from(CopySource={"Bucket": obj.bucket_name, "Key": obj.key})
                send_cfn_response(event, context, cfnresponse.SUCCESS)
            except Exception as e:
              print(e)
              send_cfn_response(event, context, cfnresponse.FAILED)

          def send_cfn_response(event, context, response_status):
            response_body = {'Status': response_status,
                               'Reason': 'Log stream name: ' + context.log_stream_name,
                               'PhysicalResourceId': context.log_stream_name,
                               'StackId': event['StackId'],
                               'RequestId': event['RequestId'],
                               'LogicalResourceId': event['LogicalResourceId'],
                               'Data': json.loads("{}")}
            cfnresponse.send(event, context, response_status, responseData=response_body)
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 60

  InvokeS3Transfer:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - DataLakeBucketPolicy
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt s3KeyTransferLambda.Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2IAMPolicy
    Properties:
      Roles:
        - !Ref EC2IAMRole

  EC2Instance:
    DeletionPolicy: Delete
    DependsOn: EC2IAMPolicy
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bf84c42e04519c85
      InstanceType: t2.small
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          sudo useradd ec2-user

          sudo yum update -y

          sudo mkdir /home/ec2-user/code

          export HOME=/home/ec2-user

          chown ec2-user /home/ec2-user && chown ec2-user /home/ec2-user/code

          sudo yum remove -y awscli

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" &&
          unzip awscliv2.zip &&
          sudo ./aws/install

          sudo yum install pip -y

          aws s3 cp s3://${BucketName}/BasicImageSegmentationAPI/Assets/get_ip.sh /home/ec2-user/get_ip.sh

          aws s3 cp s3://${BucketName}/BasicImageSegmentationAPI/Assets/image_generator.py /home/ec2-user/image_generator.py

          aws s3 cp s3://${BucketName}/BasicImageSegmentationAPI/Assets/urls.json /home/ec2-user/urls.json

          sudo chown ec2-user /home/ec2-user/get_ip.sh
          sudo chown ec2-user /home/ec2-user/image_generator.py

          sudo chmod +x /home/ec2-user/image_generator.py
          sudo chmod +x /home/ec2-user/get_ip.sh

          pip3 install requests

          bash /home/ec2-user/get_ip.sh

  # Security group for all EC2 instances defined in the project. Required as an export for the parent template.
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TestSecurityGroup
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
