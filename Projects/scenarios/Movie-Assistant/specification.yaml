name: Movie Assistant
description: |
  Struggling to choose which movie to watch on your evening off?
  Build a simple Python project to make it easy to explore movies online.
id: 5bd67891-df39-4d70-961d-1768ca872253
#UMLDiagramUrl: https://lucid.app/documents/embeddedchart/96e11fac-f5f0-4cfe-ab52-4f0039ea1957
cover_img: https://aicore-portal-public-prod-307050600709.s3.eu-west-1.amazonaws.com/images/scenarios/movie-recommendation.png
requires_aws: False
requires_github: False
rotate_to: ccec2912-b0c5-4798-bcfd-21add0e658af
milestones:
  - name: Understand the Data
    description: |
      Dive into the dataset to get a solid understanding of what is contained in the dataset.
    id: 8c2bc8ab-dd18-451c-ad63-5e3f3ca22462
    tasks:
      - name: Count the data
        id: 3fe2e496-422d-4059-81e5-863649ff2809
        duration: 2
        description: |
          How many movies are there?

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_1.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 96a873c0-3f66-455d-b672-41c29ca73f0d # Lists
      - name: Select the first movie
        id: fa5589a6-c4c0-4b53-be66-61bd16d760da
        duration: 2
        description: |
          Index the list to select the first movie in the list.
          Print it out.
          What data type is the movie returned?
          Explore what it contains.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_1.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 96a873c0-3f66-455d-b672-41c29ca73f0d # Lists
      - name: Explore that Movie
        id: 3a4d3a14-d098-40f1-92ea-fb3dba8b3493
        duration: 2
        description: |
          Index the dictionary to select the "link" key and print its value. Where does this link take you?

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_1.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 6556d991-bdd0-4e97-bfb1-c9355f34a868 # Dictionaries

  - name: Explore the data and Compute Some Useful Values
    description: |
      Create some functions and code up the logic for calculating and displaying some information that will be helpful in understanding the data and solving the problem.
    id: a8b646ed-9fca-4acd-8c54-132cfdca42b9
    tasks:
      - name: Show Every Movie Name
        id: 38b7d2f9-5148-4a14-8955-243add46a6e0
        duration: 2
        description: |
          Define a funtion called `print_every_movie_title` that goes through the list of movies and prints each of their title, one by one.
          The function should not return anything

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_2.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 55b2eae1-aa8b-4243-b2df-0de2f02b073e # printing things in Python
          - d8373c94-0031-470e-abd4-f9a07f2afbaf # Loops
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions

      - name: What is the Length of a Given Movie's Description?
        id: f685afb2-2f4a-4839-8bd0-265722ae2c73
        duration: 2
        description: |
          Define a function called `get_movie_description_length` that takes in one of the movies in its usual a dictionary format, then returns the exact number of characters in its description.
          The function should return an integer.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_2.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions
          # - # round
          # - # floats

      - name: What is the Average Length of any Movie Description?
        id: e5d56fc7-12f1-4036-90f7-e79918dc0e3d
        duration: 2
        description: |
          Define a function called `get_avg_movie_description_length` that returns the average number of characters in any movie description throughout the whole dataset.
          The function should return a floating point number, rounded to 1 decimal place.

          To avoid repeating code, make sure that you use the function you defined earier for getting the movie description length inside this function.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_2.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions
          # - # round
          # - # floats

      - name: What is the Maximum Length of any Movie Name?
        id: 46cd64ca-34e5-47e3-bf96-249bcd84f1df
        duration: 2
        description: |
          Define a funtion called `get_max_movie_name_length`.

          It should return 2 things, in this order:

          1. The integer number of the length of the longest movie name.
          2. The name of the movie.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_2.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions
          # - # functions with multiple arguments

  - name: Create Some Functions that will be Useful for Building the Movie Assistant
    description: |
      Build the individual components of the system that will later be composed to produce the entire solution.
    id: 83b25998-abf2-46b5-a0de-f1cb61eba2b3
    tasks:
      - name: Load in the Full Movies Dataset from a File
        id: cff93827-3cd9-48aa-b119-f752ff4ef212
        duration: 2
        description: |
          Use Python's `open` function to open a file and read in its contents.

          Make sure you use a context manager to do this.

          Make sure you use the `json` library to do this.

          Put this inside a function named `load_movies_data` which takes no parameters and returns the list of movies, each as a dictionary.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_3.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 1e915112-889d-428b-905b-b8cf4bdce0bf # context managers
          - 45c012a2-ca0c-48a0-8b6b-f664e700160e # json
          # - # opening files in python
          # - # json library

      - name: What are the Unique Genres?
        id: 0df816cf-bc2c-493c-a32e-47993aec0d8e
        duration: 2
        description: |
          Define a funtion called `get_unique_genres` that returns a set of unique genres. 

          The function should return a set, not a list.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_3.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 896f4f9c-f77a-452e-b82c-af082b59bf8f # sets
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions

      - name: Filter by Genre
        id: 84a9d3e7-a310-4632-872c-951e2f47d66f
        duration: 2
        description: |
          Define a function called `get_movies_in_genre` which returns a list of only movies in that genre.

          The function should take in a genre as a string.

          The movies should be returned in their usual dictionary format.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_3.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions
          # - # filter method

  - name: Combine Everything to Build the Movie Assistant
    description: |
      Overall, when our code runs, the user should be asked to select a genre and then select a movie from a list presented. 
      Once they do that, they should see the details of that movie printed.
    id: 0b02e30b-7990-4ee5-97f8-91dd7d6d5f25
    tasks:
      - name: Ask the user what genre they are interested in
        id: 27f82926-103e-4b8f-bbe9-664f0e21cbb2
        duration: 2
        description: |
          Before you ask a user for their input, print out all of the available options.
          Get this from your `get_unique_genres` method defined earlier.

          Then, take a user input and assign it to the variable `genre_choice`.

          Put all of this in a function called `get_user_genre_choice`.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_4.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions

      - name: Show the Movies in the Selected Genre
        id: e80675f7-709c-4672-b137-cdfb1a295e0e
        duration: 2
        description: |
          Use your `get_movies_in_genre` method to get a list of movies in the genre selected.

          Print each movie within the selected genre on a new line.

          At the start of the line, print the integer index of the movie.

          Make sure to:

          1. Use the built-in `enumerate` function.
          2. Use an f-string to format the printed text.

          To avoid confusing users, make the indexing start from 1 rather than zero.

          For example, one line should look something like: "3: The Dark Knight".

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_4.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions

      - name: Ask the User to Select one of the Movies Shown, then Finally, Display the Details of the Movie
        id: 1a327878-f0d1-4824-9173-19bbe9e485a5
        duration: 2
        description: |
          Define a new function called `get_movie_by_index`. 

          It should first print out all the movies in the genre selected.

          Then, it should ask the user to select a movie by entering the index of the movie.
          Assign this to a variable named `selected_movie_index`. 

          HINT: Be careful of what data type is returned from the `input` function.

          Print the key-value pairs of the selected movie's dictionary each on a new line.

          On each line, print the key and the value, separated by a comma.

          Make sure to use the `.items()` method of the dictionary.

          Your program should end after this.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_4.ipynb) to get started.
        prerequisites:
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 4223a361-1776-424d-a561-1f8fb0260862 # defining functions

  - name: Make your Code Robust
    description: |
      Currently, the code is very fragile, and will easily break if the user selects an invalid genre or movie, for example. 
      It's time to fix this by raising the right errors in the right places, and fixing where we expect them to come up as a result of invalid use by the user.
    id: 9e57e248-324f-47e6-97bc-1582514ba314
    tasks:
      - name: Validate the User's Genre Choice
        id: cdc83104-f1ab-4025-bd9f-562bcdd43190
        duration: 2
        description: |
          Redefine the `get_user_genre_choice` function to validate the input and make sure that it's actually one of the genres from the dataset.

          If the value is not valid, then raise an error.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_5.ipynb) to get started.
        prerequisites:
          # - # raising errors
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 75cbb06b-2e16-439a-a1db-b897b2e1ec46 # operators
          - 0c41ae2b-fd2f-41a8-ba14-b1273d0bd3e7 # essentials of error handling

      - name: Raise a Specific Type of Error
        id: 5e26286d-2c45-40ae-bb60-7b4dc55784c8
        duration: 2
        description: |
          Specifically, raise a `ValueError` with a useful error message "This is not a valid genre"

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_5.ipynb) to get started.
        prerequisites:
          # - # raising errors
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 0c41ae2b-fd2f-41a8-ba14-b1273d0bd3e7 # essentials of error handling

      - name: Handle the Error
        id: 70ee0e26-e4d0-4e2f-a0e7-f4234fdeffdd
        duration: 2
        description: |
          If the genre selected is not valid, and your code successfully raises an error when that is the case, handle the error so that instead of your code failing and stopping, it asks the user to try again.

          HINT: You may want to use an infinite `while` loop, and break out of it only if the error is not raised.

          The code should handle only the specific type of error that is raised if the genre is not valid.

          Open this [notebook](https://colab.research.google.com/github/AI-Core/movie-recommendation-system/blob/main/milestone_5.ipynb) to get started.
        prerequisites:
          # - # raising errors
          - 96a5182d-e73b-474b-8a4a-adfda3121365 # Google colab
          - 0c41ae2b-fd2f-41a8-ba14-b1273d0bd3e7 # essentials of error handling
