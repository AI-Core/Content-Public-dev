name: Computer Vision Rock Paper Scissors
description: |
  Rock-Paper-Scissors is a game in which each player simultaneously shows one of three hand signals representing rock, paper, or scissors. 
  Rock beats scissors. Scissors beats paper. Paper beats rock.

  The player who shows the first option that beats the other player's option wins.

  This is an implementation of an interactive Rock-Paper-Scissors game, in which the user can play with the computer using the camera.
id: a68593ba-eee2-4a6e-9eb0-1ed7fc3733e4
rotate_to: 8955a07c-2223-4757-9f74-2aa287aa1aca
cover_img: https://aicore-portal-public-prod-307050600709.s3.eu-west-1.amazonaws.com/images/scenarios/cvrps.png
requires_aws: False
requires_github: True
milestones:
  - name: Set up the environment
    tasks:
      - name: Set up Github
        id: 032dcdb6-69e1-450c-96aa-819a45d6aaa1
        description: |
          In this project,  you'll use GitHub to track changes toyourcode and save them online in a GitHub repo. Hit the button on the right to automatically create a new GitHub repo. We'll tell you when you need to use it as you go through the project.
        duration: 1
        prerequisites:
          - 86076c6d-6df5-4c14-8f5e-7d3dfe661de6 # 1 Git
          - b457ee87-74b7-414d-bbc8-43fb8acc8cc4 # 2 Github
        requires_verification: True
    description: Let's set up your dev environment to get started!
    id: 793ccbbd-0d50-40df-9fc8-42c49438da11

  - name: Create the computer vision system
    description: The first task consists of creating a computer vision system - also known as a model - that detects whether the user is showing Rock, Paper, or Scissors to the camera
    id: a1114128-f63d-4d94-bd26-38c14e3b48b8
    tasks:
      - name: "Create an image project model with four different classes: Rock, Paper, Scissors, Nothing"
        id: 08c1b5f5-7beb-4cec-8189-0f1acc7ca745
        description: |
          Go to [Teachable-Machine](https://teachablemachine.withgoogle.com/) to start creating the model. 
          Each class is trained with images of yourself showing each option to the camera. 
          The "Nothing" class represents the lack of option in the image. 
          Remember that the more images you train with, the more accurate the model will be
        duration: 6

      - name: Download the model
        id: bcf3c4f1-1547-4727-8e25-a14165eac6d6
        description: |
          Download the model from the "Tensorflow" tab in Teachable-Machine. 
          The model should be named `keras_model.h5` and the text file containing the labels should be named `labels.txt`.

          The files you are downloading contain the structure and the parameters of a deep learning model. 
          They are not files that can be run, and they do not contain anything readable if you look inside. 
          Later, you will load them into your Python application in the next milestone.

          Make sure you push the model and labels to your GitHub repository after committing.
        duration: 1
        requires_verification: True

      - name: Begin documenting your experience
        id: e82a250f-536f-4649-b3e2-2e8680a9119d
        description: |
          Now that you have created your model and downloaded it, add documentation to your README file following this [guide](https://github.com/AI-Core/ExampleDocumentation).

          Talk about the model and how you will use it for this project.
        duration: 2
        requires_verification: True

  - name: Install the dependencies
    description: To make the model work in your computer, you have to install a few things
    id: 5589974c-c545-498d-a20a-51f22709b84e
    tasks:
      - name: Create a new virtual environment
        id: 1ef920ef-7e5f-4078-9e28-eb8e08946319
        description: |
          Before you can use the model, you need to install the libraries that it depends on.

          Create a conda environment and then install the necessary requirements. You need `opencv-python`, `tensorflow`, and `ipykernel`

          Start by creating the environment, activate it, and then install `pip` by running the following command in your terminal `conda install pip`. Then, to install the rest of the libraries, run `pip install <library>`
          - Important: If you are on Ubuntu, the latest version of Tensorflow doens't work with the default version of Python. When creating the virtual environment, use Python 3.8 instead by running:

          `conda create -n my_env python=3.8`

          Where `my_env` is the name of the environment you want to create.

          After that, the libraries you have to install are the ones mentioned above.
        prerequisites:
          - 0746278f-b348-4cbc-97d7-2382bf7b8efb # 3 pip
          - 523a31ca-c8a3-44a9-a599-17f66c89a6e8 # 4 conda
          - cf55cfa3-05a2-4299-bd39-ba5acfc9df85 # 1 What is the command line
          - 7e0fc1d3-42ad-420f-ad7f-4e5b1359233d # 2 Running terminal commands
        #           TODO what is a model
        duration: 3

      - name: Create a new virtual environment - For Users who are on a Mac with an M1 Chip
        id: 4e351f18-6f0c-44fd-ace7-fda6dad5e8cc
        description: |
          Are you on a Mac with an M1 chip? If not mark this task as complete and move on to the next task

          Once you installed miniconda. First, create a virtual environment by running the following commands: 

          `conda create -n tensorflow-env python=3.9`

          `conda activate tensorflow-env`

          `conda install pip`

          Then, follow the steps from the section that says "arm64: Apple Silicon" from this [link](https://developer.apple.com/metal/tensorflow-plugin/). 

          Once you get tensorflow for Mac, you will install opencv for Mac by running the following commands:

          `conda install -c conda-forge opencv`

        duration: 3

      - name: Complete the installation of dependencies
        id: 708b5625-63e0-4aaa-b941-97bb802f4954
        description: |
          And finally, make sure you install `ipykernel` by running the following command:

          `pip install ipykernel`

          Once you installed everything (regardless of the operating system) create a requirements.txt file by running the following command:

          `pip list > requirements.txt`

          This file enables any other user that wants to use your computer to easily install these exact dependencies by running `pip install requirements.txt`.
        prerequisites:
          - c49dbf84-1480-4ce5-a558-a07814336b6f # 3 A deeper understanding of the terminal
          - 218220c1-a559-4ebc-b3d8-2fb10ff76302 # 1 What is Python
        duration: 1
        requires_verification: True

      - name: Check the model works
        id: bbbdf8bf-d35b-4473-857f-dc81d16edac4
        description: |
          Run this [file](https://aicore-files.s3.amazonaws.com/Foundations/Python_Programming/RPS-Template.py) just to check the model you downloaded is working as expected

          Make sure that you have the correct name for the model, the correct name for the labels, and that the model and this file are in the same folder.
        duration: 3
        prerequisites:
          - 1a9545ea-2616-4ef9-bedc-d1d0186c14b5 # 5 Running Python files from the terminal
          - f227e021-88bf-4cb6-97cf-73bd8a0fa612 # 1 A tour of VSCode
          - bdf26d3b-1b8e-4b3e-bb90-cbca70df1512 # 2 The VSCode integrated terminal
          - fb8268dd-2b60-46a8-833b-21f0b1263a4f # 2 How (and how not) to run Python files from VSCode
          - 968f0a2f-a4fe-4484-93b6-223a1d62a268 # 5 Exactly cloning a conda environment

      - name: Get familiar with the code
        id: c41ad504-5f65-4348-9f4c-5cf9b752e477
        description: |
          The code you downloaded might look complicated right now. 
          But you'll have a firm understanding of it in no time.

          Please note that knowledge of Tensorflow and Keras is outside the scope of this project. 
          If you're interested anyway, both libraries are used to build deep learning models (neural networks), and you will learn more about them if you choose the Data Science or Machine Learning Engineering specialisations.

          The main thing to understand is that the variable `predictions` contains the output of the model, and each element in the output corresponds to the probability of the input image representing a particular class.

          So, for example, if the prediction has the following output: `[[0.8, 0.1, 0.05, 0.05]]`, there is an 80% chance that the input image shows rock, a 10% chance that it shows paper, a 5% chance that it shows scissors, and a 5% chance that it shows nothing.

          Notice that the prediction is a numpy array with one row and four columns. So first, you need to access the first row, and then get the index of the highest value in the row. Check this [link](https://numpy.org/doc/stable/reference/generated/numpy.argmax.html) to see how to get the index of the highest value in a row.

          Before moving on, you need to make sure you understand how Python works. So make sure you've understood the prerequisite content.

          You have to know at least how to effectively use `while` loops and `if` statements. Please, don't move on until you have a solid understanding of these concepts.
        prerequisites:
          - 25d1757b-66ee-4c5d-8489-adcc923fec0e # 2 Arithmetic Variable Assignment and Strings
          - 96a873c0-3f66-455d-b672-41c29ca73f0d # 3 Lists and Sets
          - 6556d991-bdd0-4e97-bfb1-c9355f34a868 # 4 Dictionaries Tuples and Operators
          - 34f017d8-c4c0-468c-bd43-bb2f1ed17683 # 5 Control Flow
          - d8373c94-0031-470e-abd4-f9a07f2afbaf # 6 Loops
          - 006e3c3c-1457-48a3-b343-059ae492c1df # 11 Debugging
        #           TODO numpy
        duration: 1

  - name: Create a Rock-Paper-Scissors game
    description: Create a Python script that will simulate a Rock-Paper-Scissors game, in which the code will ask you for an input then compare your input with the computer's choice to show the winner
    id: 5d24836f-d70e-4c68-8d86-83710b073c4a
    tasks:
      - name: Store the user's and the computer's choices
        id: 2ca4b14e-76dc-44a3-bfcd-052cf78615ef
        description: |
          This code needs to randomly choose an option (rock, paper, or scissors) and then ask the user for an input.

          Create another file called `manual_rps.py` that will be used to play the game without the camera.

          You will need to use the `random` module to pick a random option between rock, paper, and scissors and the `input` function to get the user's choice.

          Create two functions: `get_computer_choice` and `get_user_choice`.

          The first function will randomly pick an option between "Rock", "Paper", and "Scissors" and return the choice.

          The second function will ask the user for an input and return it.
        prerequisites:
          - 4223a361-1776-424d-a561-1f8fb0260862 # 7 Functions
          - 1e915112-889d-428b-905b-b8cf4bdce0bf # 9 Imports and Context Managers
        duration: 5
        requires_verification: True

      - name: Figure out who won
        id: ae562b8c-bb0f-4861-a9d3-f8695953918b
        description: |

          Using `if`-`elif`-`else` statements, the script should now choose a winner based on the classic rules of Rock-Paper-Scissors.

          For example, if the computer chooses rock and the user chooses scissors, the computer wins.

          Wrap the code in a function called `get_winner` and return the winner.

          This function takes two arguments: `computer_choice` and `user_choice`.

          If the computer wins, the function should print "You lost", if the user wins, the function should print "You won!", and if it's a tie, the function should print "It is a tie!".
        duration: 2
        requires_verification: True

      - name: Create a function to simulate the game
        id: c1dfcdc5-97a4-4780-ab07-a0c4b785fcd2
        description: |
          All of the code you've programmed so far relates to one thing: running the game - so you should wrap it all in one function.

          Create and call a new function called `play`.          
          Inside the function you will call all the other three functions you've created (`get_computer_choice`, `get_user_choice`, and `get_winner`)

          Now when you run the code, it should play a game of Rock-Paper-Scissors, and it should print whether the computer or you won.
        duration: 2
        requires_verification: True

      - name: Update your documentation
        id: bd6076ef-ac2e-45a1-b38c-b5b1d733f63c
        description: |

          Update your README file, talk about how you set up your environment and the code you have written for the game.
        duration: 2
        requires_verification: True

  - name: Use the camera to play Rock-Paper-Scissors
    description: Now that you have everything prepared, it's time to use the webcam to play Rock-Paper-Scissors
    id: f394214f-b04d-4405-885b-67d82d2ab5b7
    tasks:
      - name: Putting all together
        id: 8dfaeb61-7a53-45e7-bd2f-f3939f172446
        description: |
          Replace the hard-coded user guess with the output of the computer vision model. 
          Create a new file called `camera_rps.py` where you will write the new code.

          Create a new function called `get_prediction` that will return the output of the model you used earlier.

          Remember that the output of the model you downloaded is a list of probabilities for each class. 
          You need to pick the class with the highest probability. 
          So, for example, assuming you trained the model in this order: "Rock", "Paper", "Scissors", and "Nothing", if the first element of the list is 0.8, the second element is 0.1, the third element is 0.05, and the fourth element is 0.05, then, the model predicts that you showed "Rock" to the camera with a confidence of 0.8.

          The model can make many predictions at once if given many images.
          In your case you only give it one image at a time. 
          That means that the first element in the list returned from the model is a list of probabilities for the four different classes.
          Print the response of the model if you are unclear of this.
        duration: 5
        requires_verification: True

      - name: Count down
        id: c6c2c356-c83f-4a01-896f-739eec6a05bc
        description: |
          In the previous task, the script reads the input from the camera and then compares it with the computer's choice without stopping. However, when you play a regular game, you usually count down to zero, and at that point you show your hand.

          In this case, you need to add that countdown. An important thing to remember is that you can't use the `sleep` function because it will stop the script, and during that time, the camera will not be able to capture the input.

          Use the function `time.time()` to get how much time has passed since the script started.
          Print, for example, "you chose rock" in the terminal when the countdown gets to zero.
        duration: 3
        requires_verification: True

      - name: Repeat until a player gets three victories
        id: 3891db35-2f65-43bd-849c-cde77ac0cb56
        description: |
          The game should be repeated until either the computer or the user wins three rounds. 

          Feel free to code the logic as you want, but make sure you defined at least two variables to keep track of the score of the computer and the user. Name them `computer_wins` and `user_wins` respectively.

          Quick tip here: You shouln't use a `while` loop inside the main `while` loop (the one capturing and showing your image). The reason behind it is that, when you are inside the nested loop, the code in the main `while` loop won't run, and hence, the camera won't show anything.
        duration: 4
        requires_verification: True

      - name: Take it even further! (Optional)
        id: 39061c7d-6221-49ca-b269-3f6495166b6e
        description: |
          Can you think of one way to improve the application? For example, you can print the countdown in the webcam display, or include a message like "press c to continue"? Just use your imagination and intuition to improve the user experience!

          Also, you can make your code much more readable by creating a class instead of creating multiple functions. This is not necessary, but definitely a step that will showcase your good Python skills.
        prerequisites:
          - c2db5943-3f32-4cde-b8f5-396009dbd0a5 # 18 Object Oriented Programming
          - 0c41ae2b-fd2f-41a8-ba14-b1273d0bd3e7 # 16 Error Handling
          - d30506eb-9ff4-44a0-86d3-d8a9b9920b2b # 20 Lambda functions
        duration: 4

      - name: Update your documentation
        id: 90885a05-24f5-43a2-b4fe-962a2baaddb4
        description: |
          Update your README file with what you have done for this milestone.

          Talk about how you integrated your game with the model, also talk about what more you could have done to improve the functionality of the game.

          Make sure you add images or screenshots of the game to your README file.

          Go back over your documentation and make sure it reads well and is also clear and concise.
        duration: 2
        requires_verification: True
