name: Hangman
description: |
  Hangman is a classic game in which a player thinks of a word and the other player tries to guess that word within a certain amount of attempts.
  This is an implementation of the Hangman game, where the computer thinks of a word and the user tries to guess it.
id: ccec2912-b0c5-4798-bcfd-21add0e658af
UMLDiagramUrl: https://lucid.app/documents/embeddedchart/96e11fac-f5f0-4cfe-ab52-4f0039ea1957
requires_aws: False
requires_github: True
rotate_to: a68593ba-eee2-4a6e-9eb0-1ed7fc3733e4
milestones:
  - name: Set up the environment
    tasks:
      - name: Set up Github
        id: 032dcdb6-69e1-450c-96aa-819a45d6cda1
        description: |

          In this project, we'll use GitHub to track changes to our code and save them online in a GitHub repo. Hit the button on the right to automatically create a new GitHub repo. We'll tell you when we need to use it as we go through the project.
        duration: 0
        prerequisites:
          - 86076c6d-6df5-4c14-8f5e-7d3dfe661de6 # 1 Git
          - b457ee87-74b7-414d-bbc8-43fb8acc8cc4 # 2 Github

        requires_verification: True

    description: Let's set up our dev environment to get started!
    id: 793ccbbd-0d50-40df-9fc8-42c49438da71

  - name: Create the variables for the game
    tasks:
      - name: Define the list of possible words
        description: |
          Create a file named `milestone_2.py`. This file will contain the code for the first milestone.
          In Python, Lists are used to store multiple data in a single variable. In this task, we are going to create a list of words.
          
          Step 1. Create a list containing the names of your 5 favorite fruits.

          Step 2. Assign this list to a variable called `word_list`.

          Step 3. Print out the newly created list to the standard output (screen).

        id: 3f496682-807d-4ba4-aa64-c09ebba9b83a
        prerequisites:
          - 96a873c0-3f66-455d-b672-41c29ca73f0d # Lists
        duration: 8
        requires_verification: True

      - name: Choose a random word from the list
        description: |
          To accomplish this task, you will need to use the 'random' module. 
          The `random` module is one of Python's built-in modules. 
          It has a `choice` method which returns a random item from a given sequence.

          Step 1. Go to the first line of your file.

          Step 2. Write `import random` on the line. Note: To import a module, you have to use the `import` keyword at the top of the file.

          Step 3: Create the `random.choice` method and pass the `word_list` variable into the `choice` method.

          Step 4: Assign the randomly generated word to a variable called `word`.

          Step 5: Print out `word` to the standard output. Run the code several times and observe the words printed out after each run.

        id: 62158fc2-ba1d-49f4-aee0-66ec01f63baa
        prerequisites:
          - 1e915112-889d-428b-905b-b8cf4bdce0bf # Imports and Context Managers
        duration: 2
        requires_verification: True

      - name: Ask the user for an input
        description: |
          In this task, you are required to take user input. As you now know, the `print()` function in Python displays output on the screen. Conversely, Python has an `input()` function that takes input from the screen. Note that the `input` function returns the user input in form of a string.

          Step 1. Using the `input` function, ask the user to enter a single letter.

          Step 2. Assign the input to a variable called `guess`.

        id: d592e5f4-6606-4a12-bbf2-7c160a09fd66
        prerequisites:
          - f4797b7c-0822-4a44-a49e-ebd53c48025d # Getting an input from the user
        duration: 6
        requires_verification: True

      - name: Check that the input is a single character
        description: |
          Usually, when taking input from users, it is best to validate that the input makes sense. 
          For example, we may want to ensure that only a single letter is entered and that only alphabetical characters are provided by the user.
          To do this, create conditional checks that must be passed before the input can be accepted.

          Step 1. Create an `if` statement that checks if the length of the input is equal to 1 and the input is alphabetical.

          Step 2: In the body of the `if` statement, print a message that says "Good guess!".

          Step 3: Create an `else` block that prints "Oops! That is not a valid input." if the preceeding conditions are not met.

        id: 3de4ce88-cd39-4f85-a775-529a41c2fa17
        prerequisites:
          - 34f017d8-c4c0-468c-bd43-bb2f1ed17683 # 5 Control Flow
        duration: 6
        requires_verification: True

      - name: Start documenting your experience
        id: 75e80e7f-ec62-459a-8858-9d2eb9d4beb6
        description: |
          Upload your files to the repository and create a README file.

          Add documentation to your README file following this [guide](https://github.com/AI-Core/ExampleDocumentation).

          Describe the code you wrote in this milestone.
        duration: 3
        requires_verification: True

    description: |
      The first task requires you to know how to use basic Python commands, such as `if-else` statements and `while` loops. 
      However, if you are new to Python, make sure you check out the prerequisite content to get comfortable with the language.
    id: 693f1526-0acf-41a0-b277-ba0183d60a47

  - name: Check if the guessed character is in the word
    tasks:
      - name: Iteratively check if the input is a valid guess
        id: 032dcdb6-69e1-450c-96aa-819a45d6aed3
        description: |
          Write code that will continuously ask the user for a letter and validate it.   

          Create a new script called `milestone_3.py`. This file will contain the code for this milestone.

          Step 1. Create a `while` loop and set the condition to True. Setting the condition to `True` ensures that the code runs continuously. 
          In the body of the loop, write the code required for the following steps.

          Step 2: Ask the user to guess a letter and assign this to a variable called `guess`.

          Step 3. Check that the `guess` is a single alphabetical character. Hint: You can use Python's `isalpha` method to check if the guess is alphabetica.

          Step 4. If the `guess` passes the checks, break out of the loop.

          Step 5: If the `guess` does not pass the checks, then print a message saying "Invalid letter. Please, enter a single alphabetical character."
        Prerequisites:
          - f4797b7c-0822-4a44-a49e-ebd53c48025d # Loops
        duration: 6
        requires_verification: True

      - name: Check whether the guess is in the word
        id: 93eb2ed4-e6e3-40e5-9a7d-a774d9e5f8e6
        description: |
          Check whether the letter guessed by the user is in the secret word that was randomly chosen by the computer. 
          For example, if the user guesses the letter "a" and the secret word is "apple", then your code should check if "a" is in "apple".

          Step 1. Create an `if` statement that checks if the guess is in the word.

          Step 2. In the body of the `if` statement, print a message saying "Good guess! {guess} is in the word.". Obviously, format the string to show the actual guess instead of `{guess}`.

          Step 3. Create an `else` block that prints a message saying "Sorry, {guess} is not in the word. Try again." This block of code will run if the guess is not in the word.
        duration: 3
        requires_verification: True

      - name: Create functions to run the checks
        id: 5ea59e77-6f08-41e7-99e6-eb73a9709d22
        description: |
          Good job so far! 
          But your code probably doesn't look great.
          It's hard to tell which lines do what.

          Create 2 functions, `check_guess` and `ask_for_input` functions which contain the code for those two things. 

          The `check_guess` function will take the guessed letter as an argument and check if the letter is in the word. 

          Step 1: Define a function called `check_guess`. pass in the `guess` as a parameter for the function. 
          Write the code for the following steps in the body of this function.

          Step 2: Convert the `guess` into lower case.

          Step 3. Move the code that you wrote to check if the guess is in the word into this function block.

          The `ask_for_input` function.

          Step 1. Define a function called `ask_for_input`.

          Step 2. Move the code that you wrote in the `Iteratively check if the input is a valid guess` task into this function block.

          Step 3. Outside the while loop, but within this function, call the `check_guess` function to check if the guess is in the word. Don't forget to pass in the guess as an argument to the method.

          Step 4. Outside the function, call the `ask_for_input` function to test your code.

        prerequisites:
          - 4223a361-1776-424d-a561-1f8fb0260862 # 7 Functions
          - a5378de1-4913-409c-bbbb-277a23f2a5f5 # Functions and Function calls
        duration: 6
        requires_verification: True

      - name: Update your documentation
        id: a3bc621a-19e0-4bff-bc9e-1eba3ee09160
        description: |
          Add a section to your README file that explains how you defined the functions you created.
        duration: 1
        requires_verification: True

    description: |
      In this milestone you will check if the guessed letter is in the randomly chosen word.

    id: 793ccbbd-0d50-40df-9fc8-42c49438db38

  - name: Create the Game class
    tasks:
      - name: Create the class
        description: |
          Create a new script called `milestone_4.py`. This file will contain the code for the third milestone.

          Define the `__init__` method of the `Hangman` class.

          Step 1. Create a class called `Hangman`. 

          Step 2. Inside the class, create an `__init__` method to initialise the attributes of the class. 
          Pass in `word_list` and `num_lives` as parameters. Make `num_lives` a default parameter and set the value to 5.

          Step 3. Initialise the following attributes:

          1. `word`: The word to be guessed, picked randomly from the `word_list`. Remember to import the `random` module into your script.

          2. `word_guessed`: list - A list of the letters of the word, with `_` for each letter not yet guessed. For example, if the word is 'apple', the `word_guessed` list would be [`'_'`, `'_'`, `'_'`, `'_'`, `'_'`]. If the player guesses 'a', the list would be ['a', `'_'`, `'_'`, `'_'`, `'_'`].

          3. `num_letters`: int - The number of UNIQUE letters in the word that have not been guessed yet.

          4. `num_lives`: int - The number of lives the player has at the start of the game. 

          5. `word_list`: list - A list of words.

          6. `list_of_guesses`: list - A list of the guesses that have already been tried. Set this to an empty list initially.

        id: c82f56aa-237b-49c6-ba48-67c67e80f569

        prerequisites:
          - c2db5943-3f32-4cde-b8f5-396009dbd0a5 # 8 Object Oriented Programming
        duration: 8
        requires_verification: True

      - name: Create methods for running the checks
        id: f64ba6c9-f685-4c47-88a5-7503ada30b8d
        description: |
          In this task, you will create a method that will ask the user to guess a letter and another method that will check if the guess is in the word.

          Remember that a method is a function that is defined inside a class.

          Let's create the `check_guess` method.

          Step 1: Define a method called `check_guess`. 
          Pass the `guess` to the method as a parameter. 
          In the body of the method, write the code for the following steps:

          1. Convert the guessed letter to lower case

          2. Create an `if` statement that checks if the guess is in the word

          3. In the body of the `if` statement, print a message saying "Good guess! {guess} is in the word."

          You will continue with the logic of the `check_guess` method in the next task. For now, let's create the `ask_for_input` method.

          Step 1. define a method called `ask_for_input`. In the body of the method, do the following:


            1. Create a `while` loop and set the condition to True. 

            2. Ask the user to guess a letter and assign this to a variable called `guess`.

            3. Create an `if` statement that runs if the `guess` is NOT a single alphabetical character.

            4. In the body of the `if` statement, print a message saying "Invalid letter. Please, enter a single alphabetical character."

            5. Create an `elif` statement that checks if the `guess` is already in the `list_of_guesses`.

            6. In the body of the `elif` statement, print a message saying "You already tried that letter!".

          If the guess is a single alphabetical character and it's not already in the `list_of_guesses`:

            1. Create an `else` block and call the `check_guess` method. Remember to pass the `guess` as an argument to this method. 

          Step 2. Call the `ask_for_input` method to test your code.

          That was a lot! Keep going, you are almost there.
        duration: 6
        requires_verification: True

      - name: Define what happens if the letter is in the word
        id: 2f2ccea4-f88e-4bbe-8063-1a3cf77c6d6d
        description: |
          Return to your `check_guess` method and extend it to replace the underscore(s) in the `word_guessed` with the letter guessed by the user. 

          In the `if` block of your `check_guess` method, after your `print` statement, do the following:

            1. Create a `for`-loop that will loop through each letter in the `word`.

            2. Within the `for`-loop, do the following:

              1. Create an `if` statement that checks if the letter is equal to the guess.

              2. In the `if` block, replace the corresponding "_" in the `word_guessed` with the guess. 
              HINT: You can index the `word_guessed` at the position  of the letter and assign it to the letter.

            3. Outside the `for`-loop, reduce the variable `num_letters` by 1.
        duration: 4
        requires_verification: True

      - name: Define what happens if the letter is NOT in the word
        id: 04dc4041-10bf-4c02-84cd-892b1913adf4
        description: |
          Define what happens if the guess is not in the word you are trying to guess.

          Step 1. In the `check_guess` method, Create an `else` statement.

          Step 2: Within the `else` block:

           1. Reduce `num_lives' by 1.

           2. print a message saying "Sorry, {letter} is not in the word."

           3. print another message saying "You have {num_lives} lives left."

          Step 3. Lastly, append the `guess` to the `list_of_guesses`. 
          Ensure you do this outside the `else` block so that the letter can be appended to the `list_of_guesses` in both conditions.
        duration: 2
        requires_verification: True

      - name: Update your documentation
        id: 56c6b4ba-e027-46e2-98e0-bed884e02336
        description: |
          Add a section to your README file that explains how you defined the class with the attributes and methods you created.
        duration: 2
        requires_verification: True

    description: Use the Object Oriented Programming (OOP) paradigm to develop a complete Hangman game.
    id: 01e08ef9-e820-4c78-b817-e142e3b59603

  - name: Putting it all together
    tasks:
      - name: Code the logic of the game
        id: 6abbafb7-59a3-481a-9b1f-837e37b5826c

        description: |
          Create a function that will run all the code to run the game as expected. You should begin by creating a new script called `milestone_5.py`. Copy all the codes in `milestone_4.py` file into the newly created `milestone_5.py` file.

          Step 1. Create a function called `play_game` that takes `word_list` as a parameter. Inside the function, write the code for the following steps
            
            Step 1. Create an instance of the `Hangman` class. Do this by calling the `Hangman` class and assign it to a variable called `game`.
            
            Step 2. Pass `word_list` and `num_lives` as arguments to the `game` object.
            
            Step 3. Create a while loop and set the condition to `True`. In the body of the loop, do the following:

              1. Check if the `num_lives` is 0. If it is, that means the game has ended and the user lost. Print a message saying 'You lost!'.
              2. Next, check if the `num_letters` is greater than 0. In this case, you would want to continue the game, so you need to call the `ask_for_input` method. 
              3. If the `num_lives` is not 0 and the `num_letters` is not greater than 0, that means the user has won the game. Print a message saying 'Congratulations. You won the game!'.

          Step 2. Outside the function, call your `play_game` function to play your game. Don't forget to pass in your list of words as argument to the function.
        duration: 6
        requires_verification: True

      - name: Document your experience
        id: f9464de6-74a0-43f7-aa62-91f2677b267f
        description: |
          Add a section to your README file that explains how you defined the whole game and the logic behind it.
        duration: 2
        requires_verification: True
    description: The class is already prepared. Now, the game starts!
    id: e60d8a4c-7c3f-4230-ac32-803cb59cd2e8
