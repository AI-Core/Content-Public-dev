questions:
  - question: What is a class? What is the difference between a class and an instance?
  - question: "What does the `__init__` method do? True or False: You must include an `__init__` method for all your classes"
  - question: Explain the concepts of `self`, attributes, and methods.
  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def __init__(self, name, age):
    \n\n\t\t    self.name = name
    \n\n\t\t    self.age = age
    \n\n\t  def say_hello():
    \n\n\t\t    print('Hello my name is ' + self.name)
    \n\n `p1 = Person('Jim', 36)`
    \n\n `p1.say_hello()`
    
    \nWhat error do you see?"

  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def __init__(name, age):
    \n\n\t\t    name.age = age
    \n\n\t  def say_age(name):
    \n\n\t\t    print(f'I am {name.age} years old')
    \n\n `p1 = Person(36)`
    \n\n `p1.say_age()`

    \nWhat error do you see?"

  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def __init__(self, name, age):
    \n\n\t\t    self.name = name
    \n\n\t\t    self.age = age
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello my name is ' + self.name)
    \n\n `p1 = Person('Jim', 36)`
    \n\n `p2 = Person('Dwight', 38)`
    \n\n `p1 < p2`

    \nWhat will be the output?"

  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello!')
    \n\n `p1 = Person().say_hello()`
    
    \nWhat will be the output?"

  - question: What does MRO stands for? How does it work?

  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def __init__(self, name, age):
    \n\n\t\t    self.name = name
    \n\n\t\t    self.age = age
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello my name is ' + self.name)

    \n\n `class Student(Person)`:
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello my name is ' + self.name + ' and I am a student')
    \n\n `p1 = Person('Jim', 36)`
    \n\n `p2 = Student('Dwight', 38)`
    \n\n `p1.say_hello()`
    \n\n `p2.say_hello()`

    \nWhat will be the output?"

  - question: "Observe the following code:
    \n\n `class Person(ABC)`:
    \n\n\t  def __init__(self, name, age):
    \n\n\t\t    self.name = name
    \n\n\t\t    self.age = age
    \n\n\t  @abstractmethod
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello my name is ' + self.name)

    \n\n `class Student(Person)`:
    \n\n\t  def say_hi(self):
    \n\n\t\t    print('Hi my name is ' + self.name + ' and I am a student')
    \n\n `p1 = Person('Jim', 36)`
    \n\n `p2 = Student('Dwight', 38)`
    \n\n `p1.say_hello()`
    \n\n `p2.say_hi()`

    \n What will be the output?"

  - question: What is a magic method? Why is it more useful than creating a regular method? Name at least 3 magic methods.
  - question: "Observe the following code:
    \n\n `class Person`:
    \n\n\t  def __init__(self, name, age):
    \n\n\t\t    self.name = name
    \n\n\t\t    self.age = age
    \n\n\t  def say_hello(self):
    \n\n\t\t    print('Hello my name is ' + self.name)
    \n\n\t def __str__(self):
    \n\n\t\t    return f'{self.name} is {self.age} years old'
    \n\n `p1 = Person('Jim', 36)`
    \n\n `print(p1)`

    \nIf the `__str__` wasn't there, what would be the output?"
  
# - How might I use a class if i have several related functions?
# - What is self?
# - how do i describe the line `self.height = self.get_height()`
#   - everyone write their answer in the chat. 1 minute, go!
# - What is the name of the init method short for and what does that function do?
# - Why does init have double underscores either side?
# - Describe to me as simply as you can, what is a magic method?
# - What other magic methods exist?