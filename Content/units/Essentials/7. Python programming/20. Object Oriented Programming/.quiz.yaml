name: Python Programming Classes (Constructors, methods, attributes)
questions:
  - options:
      - correct: false
        option: _self _refers to the class
      - correct: true
        option: _self _refers to the instance
      - correct: true
        option: The word _self _is just a convention
      - correct: false
        option: The word _self _is mandatory
      - correct: true
        option: bark is a method
      - correct: false
        option: bark is an instance attribute
      - correct: false
        option: bark is a class variable
      - correct: false
        option: self.name is a method
      - correct: true
        option: self.name is an instance attribute
      - correct: false
        option: self.name is a class variable
      - correct: false
        option: animal\_type is a method
      - correct: false
        option: animal\_type is an instance attribute
      - correct: true
        option: animal\_type is a class variable
      - correct: false
        option: Dog is an instance
      - correct: true
        option: Dog is a class
      - correct: true
        option: koopa is an instance
      - correct: false
        option: koopa is a class
    question: 
      "Observe the class Dog below:
      
      class Dog:
      
      \_\_\_\_animal_type = 'Mammal'

      \_\_\_\_def \\_\\_init\\_\\_(self, name, breed, colour):

      \_\_\_\_\_\_\_\_self.name = name
      
      \_\_\_\_\_\_\_\_self.breed = breed
      
      \_\_\_\_\_\_\_\_self.colour = colour
      
      \_\_\_\_def bark(self):
      
      \_\_\_\_\_\_\_\_print(f'Hi, my name is {self.name}... I mean... Woof!')
      
      koopa = Dog('Koopa', 'Shiba', 'Brown')


      Select everything TRUE about the class"
  - options:
      - correct: true
        option: There is nothing wrong with it
      - correct: false
        option: There is no _self_ variable
      - correct: false
        option: _age _is not used
      - correct: false
        option: _job _is not used
      - correct: false
        option: A _Person _object won't have attributes
      - correct: false
        option: A Person object won't have class variables
      - correct: false
        option: The hello method doesn't specify a name
    question: 
      "Observe the Person class code:

      class Person:
      
      \_\_\_\_def _ _ init _ _(name, age, job):
      
      \_\_\_\_\_\_\_\_pass

      \_\_\_\_def hello(name):
      
      \_\_\_\_\_\_\_\_print('Hello!')
      
      \_\_\_\_\_\_\_\_guido = Person(65, 'Programmer')
      
      \nWhat is wrong with it?"


  #     What is wrong with it?


  #     Select all that apply"
  # - options:
  #     - correct: true
  #       option: The code prints 1
  #     - correct: false
  #       option: The code print 2
  #     - correct: false
  #       option: The code prints 3
  #     - correct: true
  #       option: The code throws an error
  #     - correct: true
  #       option: The code prints 1
  #     - correct: false
  #       option: The code prints 4
  #     - correct: true
  #       option: The code prints 8
  #     - correct: true
  #       option: The code throws an error
  #   question:
  #     "Requirements: \n\nImport the random library. See the documentation\
  #     \ [here](https://docs.python.org/3/library/random.html)\nCheck the documentation\
  #     \ for raising an exception [here](https://docs.python.org/3/tutorial/errors.html#raising-exceptions)\n\
  #     The attribute that stores the shuffled list is named _ls_\n"
  # - options:
  #     - correct: true
  #       option: The code prints 1 and 5 (in that order)
  #     - correct: false
  #       option: The code prints 2 and 3 (in that order)
  #     - correct: false
  #       option: The code prints 5 and 1 (in that order)
  #     - correct: false
  #       option: The code throws an error
  #     - correct: true
  #       option: The code prints 27
  #     - correct: false
  #       option: The code print 45
  #     - correct: false
  #       option: The code print 42
  #     - correct: false
  #       option: The code throws an error
  #   question: 'Create two methods: _reshuffle_ and _get\_element. _


  #     The method _reshuffle _takes the attribute _ls_ to shuffle it again.


  #     _get\_element _returns the nth element in ls'
  # - options:
  #     - correct: true
  #       option: "6.987"
  #     - correct: false
  #       option: "7.431"
  #     - correct: false
  #       option: "7.342"
  #     - correct: true
  #       option: "6.977"
  #     - correct: false
  #       option: "6.794"
  #     - correct: false
  #       option: "8.102"
  #     - correct: true
  #       option: "7.0273"
  #   question: 
  #     "Create two instances of RandomListLoader named dice\\_1, and dice\\\
  #     _2, Here 42 is the integer that will set the random seed of the instances. \n\ndice\\_1 = RandomListLoader([1, 2, 3, 4, 5, 6], 42)\ndice\\_2 = RandomListLoader([1,\
  #     \ 2, 3, 4, 5, 6], 42)\n\n_Reshuffling _and _getting the first element _can be\
  #     \ compared to rolling a dice.\n\nUsing the methods you created, roll both dice\
  #     \ 10000 times, calculating the sum of both dice in each roll, and calculate\
  #     \ the mean value of the sum over the 10000 rolls. \n\nImportant: call the reshuffle\
  #     \ and get\\_element method before summing up the values in each roll.\n\nSelect\
  #     \ the number closest to the mean value."
  - options:
      - correct: true
        option: Option a) returns True
      - correct: false
        option: Option b) returns True
      - correct: true
        option: Option c) returns True
      - correct: false
        option: Option d) returns True
      - correct: true
        option: When instantiate peanut, it will print 'I am an animal'
      - correct: false
        option: When instantiate donald, it will print 'I am an animal'
    question: 
      "Observe the code
      
      class Animal:
      
      \_\_\_\_def speak(self):

      \_\_\_\_\_\_\_\_print('I am an animal')
      
      class Duck(Animal):

      \_\_\_\_def __init__(self, name):

      \_\_\_\_\_\_\_\_self.name = name

      \_\_\_\_\_\_\_\_super.__init__()

      \_\_\_\_\_\_\_\_super().speak()
      
      
      class Otter(Animal)

      \_\_\_\_def __init__(self, name):

      \_\_\_\_\_\_\_\_self.name = name

      \_\_\_\_\_\_\_\_super().speak()
      

      a)

      peanut = Otter('Peanut Otter')

      isinstance(peanut, Animal)
      

      b)

      peanut = Otter('Peanut Otter)

      isinstance(peanut, Duck)'
      

      c)

      donald = Duck('Donald')

      isinstance(donald, Animal)
      

      d)

      donald= Duck('Donald')

      isinstance(donald, Otter)
      

       Select everything TRUE about the code\n"

  - options:
      - correct: false
        option: import abc
      - correct: false
        option: import ABC
      - correct: false
        option: from ABC import abc, abstractmethod
      - correct: true
        option: from abc import ABC, abstractmethod
      - correct: true
        option: ABC
      - correct: false
        option: abc
      - correct: false
        option: abstractmethod
      - correct: false
        option: "@ABC"
      - correct: false
        option: "@abc"
      - correct: true
        option: "@abstractmethod"
      - correct: true
        option: "def speak(self):"
      - correct: false
        option: "def talk(self):"
      - correct: false
        option: "def quack(self):"
      - correct: false
        option: print(f'Hi, my name is {name})
      - correct: true
        option: print(f'Hi, my name is {self.name})
      - correct: true
        option: "def speak(self):"
      - correct: false
        option: "def talk(self):"
      - correct: false
        option: "def squeak(self):"
      - correct: false
        option: print(f'Hi, my name is {name}')
      - correct: true
        option: print(f'Hi, my name is {self.name}')
    question: 
        "You have to ensure that each animal has the method _speak_ in it. Select all the codes to fill the gaps that make the code comply with that requirement.
        

        [### YOUR CODE HERE]
        

        class Animal(_[### YOUR CODE HERE]_):
        

        \_\_\_\_[### YOUR CODE HERE]

        \_\_\_\_def speak(self):
        
        \_\_\_\_\_\_\_\_pass
        

        class Duck(Animal):
        
        \_\_\_\_def \\_\\_init\\_\\_(self, name):
        
        \_\_\_\_\_\_\_\_self.name = name


        \_\_\_\_[### YOUR CODE HERE]
        
        \_\_\_\_\_\_\_\_[### YOUR CODE HERE]
        

        class Otter(Animal):
        
        \_\_\_\_def \\_\\_init\\_\\_(self, name):
        
        \_\_\_\_\_\_\_\_self.name = name
        
        
        \_\_\_\_[### YOUR CODE HERE]
        
        \_\_\_\_\_\_\_\_[### YOUR CODE HERE]"


  #     Select as many options as gaps (7)"
  # - options:
  #     - correct: true
  #       option: isinstance(perry, Platypus) returns True
  #     - correct: true
  #       option: isinstance(perry, Otter) returns True
  #     - correct: true
  #       option: isinstance(perry, Duck) returns True
  #     - correct: true
  #       option: isinstance(perry, Animal) returns True
  #     - correct: true
  #       option: perry.lay\_egg('Baby Perry') returns a Platypus object
  #     - correct: true
  #       option: Platypus.lay\_egg('Baby Perry') returns a Platypus object
  #     - correct: false
  #       option: perry.lay\_egg('Baby Perry') returns a Duck object
  #     - correct: false
  #       option: Platypus.lay\_egg('Baby Perry') returns a Duck object
  #     - correct: true
  #       option: The Method Resolution Order of Platypus is (Otter, Duck, Animal, ABC, object)
  #     - correct: false
  #       option: The Method Resolution Order of Platypus is (Duck, Otter,Animal, ABC, object)
  #     - correct: true
  #       option: perry.speak() prints 'Hi, I am an otter and my name is Perry'
  #     - correct: false
  #       option: perry.speak() prints 'Hi, I am an duck and my name is Perry'
  #     - correct: false
  #       option: perry.speak() throws an error because Platypus object has no method speak
  #     - correct: false
  #       option: perry.speak() throws an error because the MRO has not been defined
  #   question:
  #     "You add more content to the code and now it looks like the code on
  #     the right hand side


  #     Select everything TRUE"
