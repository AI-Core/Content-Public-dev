- id: 9134d00f-c32d-49d4-88e7-8a43321e2df1
  name: Going deep!
  description: |+
    1. Use indexing to get the string "Python" from the following dictionary:
      `one_deep_dictionary = {'start here':1,'k1':[1,2,3,{'k2':[1,2,{'k3':['keep going',{'further':[1,2,3,4,[{'k4':'Python'}]]}]}]}]}`

- id: f2783596-2504-470b-b99a-723a69bae4a9
  name: XOR Gate
  description: |+
    A logic gate is something that combines some binary (true/false) inputs into a binary output. 
    An XOR gate is a logic gate that gives a true (1 or HIGH) output when only one of the inputs is true, but not when both are true.
    The name XOR is short for "exclusive OR".
    
    Take a look at [this page](https://www.maximintegrated.com/en/glossary/definitions.mvp/term/XOR%20Gate/gpk/1202) to know more about an XOR gate.
        
    You can build it using an AND gate whose inputs are the output of a NAND gate and the output of an OR gate.
    In this practical, you will build one using two input variables, A and B.
    1. Create two variables, `A` and `B`, whose values are `True` and `False` respectively (just to avoid confusion, you can hard code `A = True` and `B = False`)
    2. Using logical operators, calculate:
      - The output of an OR logic gate (`A or B`) and store the value in `C`
      - The output of an AND logic gate (`A and B`) and store the value in `D`
      - The output of a NAND (`not D`) and store the value in `D_NOT`
      - Finally, the output of the XOR gate (`C and D_NOT`) and store it in `XOR`
    3. Can you do all the steps in one line?

- id: 91354500-cb66-4045-9d34-bf3cf6eb100f
  name: Comparing integers
  description: |+
    You have one variable `x = 10`.
    1. Use the function `input()` to ask the user to introduce a number and store it into `n`
    2. Print "{n} is greater than {x}" if the introduced number is greater than `x`

- id: be94b959-aa86-4aec-a12d-e449dda478ae
  name: Comparing different data types
  description: |+
    1. Test the evaluation of the following operations
      - `99 > 5`
      - `0 == False`
      - `1 == True`
      - `6.2 < 7`
      - `9 >= 9`
      - `False < True`

- id: e97bec09-e25f-47c8-85aa-3fc4fe758202
  name: Comparing Strings
  description: |+
    1. Test the result of these comparisons
      `'AAA' > 'BBB'`
      `'AAB' > 'AAA'`
      `'aaa' > 'AAA'`
    2. Can you give an explanation of the last comparison?

- id: 973ae840-0571-4766-aaba-70958b77cf88
  name: Calculating shopping cost using indexing
  description: |+
    1. Create a dictionary called `shop` with the following items and quantities. 
      Where the item is the key and the quantity the value. 
      - 18 tomatoes
      - 2 packs of washing sponges
      - 4.5 litres of juice
      - 4 rolls of foil
      - 2kg sugar

    2. Add a another key to the `shop` dictionary called `prices` where the value is a dictionary
      of the following items and prices.
      - Tomatoes cost 87p 
      - Sugar costs £1.09
      - Washing sponges cost 29p 
      - Juice is £1.89 
      - Foil is £1.29 

    3. Create another key in the `shop` dictionary called `pack_sizes` with the value as a dictionary 
      of the following items and their quantities.
      - Pack of 6 tomatoes
      - 500g sugar of sugar
      - Pack of 10 washing sponges 
      - 1.5l of juice
      - 30m roll of foil  
      The keys for the dictionaries contained in `pack_sizes` and `prices` should all use the name of the item. 
    

    4. Find the subtotal (exc. VAT) as a variable called `order_subtotal`.

    5. Follow the next steps to do so:
      - Check how many packs you will need of each item. You can index the `pack_sizes` key in the `shop` dictionary to check the size of the package of each item
      - Multiply the previous value times the number of packs you are purchasing. Add this value to a new variable.
      - For example for tomatoes, you can calculate the number of packs by dividing 18 by `shop['pack_sizes']['tomato']`
      - Then you can multiply the result (3 in this case) times the price, so it will be 3 * 0.87
      - And store that value in `tomatoes_total_price` (once you get more confidence coding, you will see that this variable is not necessary)
      - Finally, do the same for all items and add them up

    6. Find the total (inc. VAT) as a variable called `order_total` (VAT is 20%), remember to round to two decimal points.
