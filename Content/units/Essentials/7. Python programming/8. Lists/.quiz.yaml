name: Lists and Sets
questions:
  - options:
      - correct: false
        option: len() is a list method
      - correct: true
        option: sort() is a list method
      - correct: true
        option: You _call a_ method typing _list.method()_
      - correct: false
        option: You _call_ a method typing _method_(list)
      - correct: false
        option: append() and extend() have the same functionality
      - correct: false
        option: append() and insert() have the same functionality
      - correct: true
        option: pop(-1) and pop() have the same functionality
      - correct: false
        option: index(_element_) returns 0 if _element_ is not in the list
      - correct: true
        option: count(_element) _returns 0 if _element _is not in the list
    question: Select everything TRUE about list methods.
  - options:
      - correct: false
        option: b is a list
      - correct: false
        option: c is a list
      - correct: true
        option: d is a list
      - correct: true
        option: b is a string
      - correct: false
        option: c is a string
      - correct: false
        option: d is a string
      - correct: false
        option: b is an integer
      - correct: true
        option: c is an integer
      - correct: false
        option: d is an integer
    question: 'You have the following code snippet:

      a = [ 1, 5, ''Hello'', 8, 6]

      b = a[2]

      c = a[-1]

      d = a[1:4]

      Select everything TRUE about these variables.'
  # - options:
  #     - correct: false
  #       option: '[1, 2, 3, 4]'
  #     - correct: false
  #       option: (1, 2, 3, 4)
  #     - correct: false
  #       option: '{1, 2, 3, 4}'
  #     - correct: false
  #       option: '[1, 2, [3, 4]]'
  #     - correct: true
  #       option: None
  #   question: What is the output of the code shown in the picture?
  - options:
      - correct: false
        option: sorted(fruits, key=reversed)
      - correct: true
        option: sorted(fruits, reverse=True)
      - correct: false
        option: fruits.reverse()
      - correct: false
        option: fruits.sort()
      - correct: true
        option: fruits.sort(reverse=True)
      - correct: false
        option: fruits.sorted()
      - correct: false
        option: fruits.sorted(reverse=True)
    question: 'You have a list named fruits:

      fruits = [''banana'', ''pineapple'', ''apple'', ''orange'', ''strawberry'']

      You want to create the following list:

      [''strawberry'', ''pineapple'', ''orange'', ''banana'', ''apple'']

      Select the option(s) that returns the desired list.'
  - options:
      - correct: true
        option: arr[1][0][1]
      - correct: false
        option: arr[-2][0][1]
      - correct: true
        option: arr[-1][0][1]
      - correct: false
        option: arr[-1][0][0]
      - correct: true
        option: arr[1][-2][1]
      - correct: false
        option: arr[-1][0][2]
    question: "You have the following list:\narr = [\n [[1, 2], [3, 4]], \n [[5, 6],\
      \ [7, 8]]\n ]\nwhich of the following options returns 6?\n\nSelect all that\
      \ apply."
  - options:
      - correct: false
        option: sets are ordered and indexed
      - correct: false
        option: sets are ordered and unindexed
      - correct: false
        option: sets are unordered and indexed
      - correct: true
        option: sets are unordered and unindexed
      - correct: true
        option: if A={1,2,2,3}, B={1,2,3}, then A is equal to B (A == B)
      - correct: true
        option: You can cast a list or a tuple to a set using _set()_
      - correct: false
        option: remove() and discard() have the same functionality
      - correct: true
        option: difference\_update() needs two sets to work (set\_1.difference\_update(set2))
    question: Select everything TRUE about sets.
  - options:
      - correct: false
        option: set(tup)
      - correct: true
        option: list(set(tup))
      - correct: false
        option: list(tup)
      - correct: false
        option: set(list(tup))
    question: 'Consider the following incomplete code:

      tup = (1, 5, 4, 1, 8, 1, 5, 2, 2, 2, 1, 8)

      print(\_\_\_)

      Fill the gap, so the output after running the code is:

      [1, 2, 4, 5, 8]'
  - options:
      - correct: true
        option: fruits.add('durian')
      - correct: false
        option: fruits + 'durian'
      - correct: false
        option: fruits + {'durian'}
      - correct: true
        option: set(list(fruits) + ['durian'])
      - correct: true
        option: fruits\_2 = {'banana', 'cherry', 'durian'}, fruits.update(fruits\_2)
    question: 'You have the following set:


      _fruits = {''apple'', ''banana'', ''cherry''}_


      Select all options that returns the following set:


      _{''apple'', ''banana'', ''cherry'', ''durian''}_


      Select all that apply.'
  - options:
      - correct: false
        option: set\_a.union(set\_b) returns {'b', 'c', 'd'}
      - correct: true
        option: set_\__a.intersection(set_\__b) returns {'b', 'c', 'd'}
      - correct: false
        option: set\_a.difference(set\_b) returns the same as set\_b.difference(set\_a)
      - correct: true
        option: set_\__a.symmetric\_difference(set\_b) returns the same as set\_b.symmetric\_difference(set\_a)
      - correct: false
        option: for any two non-empty sets, set\_c and set\_d, set\_c is equal to set\_c.union(set\_c.union(set\_d))
      - correct: true
        option: for any two non-empty sets, set\_c and set\_d, set\_c is equal to set\_c.union(set\_c.intersection(set\_d))
    question: 'You have the following sets:


      _set\_a = {''a'', ''b'', ''c'', ''d''}_

      _set\_b = {''b'', ''c'', ''d'', ''e''}_


      Select everything TRUE about these sets.'
  - options:
      - correct: true
        option: set1.issuperset(set1) is True
      - correct: true
        option: set1.issuperset(set2) is True
      - correct: false
        option: set2.issuperset(set1) is True
      - correct: true
        option: set2.issuperset(set3) is True
      - correct: false
        option: set1[0:4].issuperset(set2) is True
      - correct: false
        option: set1[0:4].issuperset(set3) is True
    question: 'You have the following sets:


      _set\_1 = {1, 2, 3, 4, 5}_

      _set\_2 = {2, 4}_

      _set\_3 = {2}_


      Select everything TRUE about these sets.'
