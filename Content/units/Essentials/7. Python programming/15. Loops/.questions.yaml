questions:
  - question: What is the main difference between `for` and `while` loops?
  - question: What is the difference between `break`, `continue`, and `pass`?
  - question: You have a list of strings. Name two ways to iterate over this list.
  - question: You have a list of numbers, and you want to loop through the numbers in reverse order. How would you do it?
  - question: "You have the following list: `[1, 2, 3]`. How can you obtain a dictionary where each key is an element of the list, and its corresponding value twice the key"
  - question: Can you do the same with a single line?
  - question: "You have the following dictionary: `{10: 20, 30: 40, 50: 60}`. You want to calculate the result of adding all the multiplications between the key and the value \n\n Thus, the operation will look like 10 * 20 + 30 * 40 + 50 * 60"
  - question: "You have three lists: `[1, 2, 3]`, `[4, 5, 6]`, and `[7, 8, 9]`. How can you combine these three lists into a single list?"
  - question: "You have the following list: `['Python', 'Java', 'C++', 'Golang', 'Pascal', 'Assembly']`. How can you create another list where each element is half the string? \n\n If the number of characters is odd, return the middle character as well"
  - question: Why would you want to use comprehensions instead of loops?
  - question: "You have the following list: `['Python', 'Java', 'C++', 'Golang', 'Pascal', 'Assembly']`. Using a comprehension list, How can you obtain a of the length of each string?"
  - question: Comprehensions can also be used for dictionaries. Using a dictionary comprehension, can you create a dictionary where each key is an element of a list, and its corresponding value is the length of the string.
  - question: "Using a dictionary comprehension, can you reverse a dictionary? \n\n Thus, the operation will look like {'a': 1, 'b': 2, 'c': 3} -> {1: 'a', 2: 'b', 3: 'c'}"
