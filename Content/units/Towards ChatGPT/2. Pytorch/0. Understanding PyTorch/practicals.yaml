- description: |+ 
    1. Make sure you have conda installed on your local machine.
    2. Create a new conda environment using the `conda create` command. Add `numpy`, `pandas` and `pytorchz` as part of the `create` command.
    3. Activate your environment.
    4. check which version of pytorch you have using the `conda list` command.
    5. Create a new Python file and import the torch module `nn.functional` .
    6. Check it imports successfully.

  id: f4c71f11-3cae-4f8c-98fd-514627d4ded5

  name: Making a PyTorch Environment


- description: |+ 
    1. Create a new project folder on your local drive, and download the Boston Housing dataset from [this](https://aicore-files.s3.amazonaws.com/Data-Science/BostonHousing.csv) link.
    2. Create a new file called "boston_regression.py" in the same folder.
    3. Import `torch` and `pandas`.
    4. Define a class called `BostonHousingDataset` that inherits from `torch.utils.data.Dataset`.
    5. Inside the class constructor, read in the dataset csv file using `pd.read_csv`.
    6. Assign two attributes, `self.X` and `self.Y`, and assign them to your features and labels. The labels are in the column called "medv‚Äù, all the other columns are features. Convert the data to torch tensor format as you assign them, and set the datatype to float32. You can look at the docs for `torch.tensor()` for help.
    7. Now define the second crucial method of the dataset class: `__getitem__`. This needs to take in an index of your dataset and return the features and label corresponding to that index.
    8. Finally, define the `__len__` method, which defines how your dataset responds to the len() method in python. It should print the number of rows in your dataset when called.
    9. Finally, let's load our data into a dataloader as if we were going to perform minibatch optimisation. Create an instance of your BostonHousingDatset class, and pass it as an argument to an instance of the `DataLoader` class (found in `torch.utils.data`). Specify a batch size of 4 and set shuffle to `True`, and call the instance `train_loader`.
    10. We can now test our dataloader by running the command `next(iter(train_loader)`, Print the result.
   

  id: de5ba7fa-5835-4f4b-87c9-58d0d0bf086a

  name: Making a PyTorch Dataset

- description: |+ 
    1.  Download the Boston Housing dataset from this [this](https://aicore-files.s3.amazonaws.com/Data-Science/BostonHousing.csv).
    2. Create a new pytorch script and create a dataset class that inherits from `torch.utils.data.Dataset`, making sure to define the `__getitem__` and `__len__` methods, load in the data from the csv file, and store the features and labels as attributes.
    3. Create an instance of your dataset class.
    4. Create a dataloader and pass your dataset as an argument, set the batch size to 16 and shuffle to `True`.
    5. Define a class called `PytorchLinearRegression` that inherits from `torch.nn.Module`.
    6. Inside the class constructor, initialise parent class attributes using `super().__init__()` and add a single linear layer, with input size equal to number of features in your dataset, and output size equal to 1 (the number of labels).
    7. Now define the compulsory `forward` method, which takes in your features as an argument, and passes it through the linear layer. To do this, simply call your linear layer on the features as if it were a function, and return the output.
    8. The last thing we need in order to train our model is a training loop. For this, copy the one from the notebook for this lesson into your python file, making a few small changes in the following steps.
    9. Remove the 4th line from the `train` function - we don't need to manually shuffle the data anymore, the dataloader will do that for us.
    10. Change the optimiser to `torch.optim.Adam`, and the learning rate to 0.001
    11. Set the number of epochs to 300.
    12. At the bottom of your Python file, create an instance of your `PytorchLinearRegression` model, and then call your `train()` function with your model and dataloader instances as input arguments.
    13. Run the python file. How does the loss vary with successive epochs?

    
  id: 4ca91c65-c7f7-42a3-8594-bb22359c3dd4

  name: Training a Regression Model in Pytorch
