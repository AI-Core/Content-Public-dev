- name: Your own API
  id: b4f5cc66-01ee-435b-8f41-66248d5e2424
  description: |
    - create a simple FastAPI with one route for the path '/' which returns a stringified dictionary with a key 'data' and value 'hello world'
    - why does the data need to be serialised by `json.dumps`?
    - Firstly, run the api locally by importing uvicorn into your python script
    - Secondly, remove the code which runs your api and just run the api directly from the terminal, using the uvicorn CLI, as shown in [these docs](https://fastapi.tiangolo.com)
    - test it with `curl` from the terminal
    - test it with `requests` from python

- name: Sending query string data along with our GET requests
  id: 31bfd7e0-29d6-4910-87f0-7972c7e41965
  description: |
    - Create a CSV file containing the `id` (should be uuid4), `first_name`, `age` and `last_name` of people in each row. This will represent our database.
    - Define a get method for which takes in a query string param `name` and uses this to read the corresponding entry of the CSV

- name: POSTing
  id: b4c3275a-4540-4521-9689-2e1069162c81
  description: |
    - Create a FastAPI with a resource which has a POST method defined and accepts a person's height and weight
    - Save this data in a CSV file row, along with any other useful metadata (time, IP address etc)
    - Return the BMI of the person
    - Test locally and it will probably fail
    - We need to create a data model to avoid a 422 error

- name: My first ML API
  id: 461fa84e-7eb8-4dd1-ac8f-a5bf5c279833
  description: |
    "- Fit a sklearn linear regression model to the boston housing dataset (dont worry about anything like validation or testing right now, just `fit` the model)
    - Create a new API resource '/predict' which calls this model on some data
      - This resouce should only accept POST requests
    - Test it locally using python with the `requests` library
    - Extra: how can you make a POST request, with a payload using `curl` from terminal, to test this new method"

- name: Real database
  id: b0a535e2-e8e8-4385-bcca-38128fc228b4
  description: |
    - Create a simple database containing entries for some made up users and insert some data
    - Create an API that connects to that database and allows users to perform CRUD operations
    - C: Implement GET methods to get different entries from different tables using query string parameters
    - R: Implement POST methods to create a new entry
    - U: Implement PUT methods to update an existing entry
    - D: Implement DELETE methods to delete an existing entry by id
    - Be careful what you do with this code if it contains your database credentials

- name: Computer vision API
  id : d19449b9-20d5-42aa-a3c6-4919ec9506fa
  description: |
    - Grab a pretrained mobileNetV2 model from TorchHub [here](https://pytorch.org/hub/pytorch_vision_mobilenet_v2/)
    - Test it locally as shown in the documentation
    - Call this model 
    - Create an API resource which takes in an image and makes a prediction
      - You should base64 encode your image and decode it within the API resource. 
        - Why is this necessary?
        - Why is this the standard way to do things?
    - Make sure to implement error handling and return an appropriate response if things break

- name: Manual EC2 deployment
  id: 85000c8c-a9ff-46b0-95bd-cb85efb479ae
  description: |
    - Spin up a new EC2 instance and download the keys
    - SSH in
      - make sure to specify the correct path to the keys
      - ensure that your file permissions are not too open
      - don't forget to allow inbound connections from your IP address on the port your api will listen for requests on by editing the EC2 security group
    - Deploy a FastAPI on EC2