name: 4.2.2 AWS CloudFormation
questions:
  - options:
      - correct: true
        option: When running several different applications from one organisation
          cloud account, it can become hard to tell which resources belong to which
          applications
      - correct: true
        option: Manually provisioning infrastructure is prone to human error
      - correct: true
        option: System design can go through a code review process
      - correct: false
        option: YAML is better than JSON
      - correct: true
        option: Removing lots of resources which are part of one application can be
          a pain, Cloudformation makes it easy
      - correct: false
        option: Some AWS resources have options which can only be set through Cloudformation
      - correct: true
        option: Making changes to production infrastructure can introduce problems
          if other resources in the stack depend on it. With cloudformation we can
          preview changes and roll back to previous stacks if required
    question: Which of the following are motivations for using Cloudformation?
  - options:
      - correct: true
        option: There is no additional charge for using AWS CloudFormation to provision  AWS
          resources
      - correct: false
        option: Using AWS CloudFormation, it's just as easy to provision resources
          from other cloud service providers, like GCP, in the same template
      - correct: false
        option: You can use AWS CloudFormation to define your database schema when
          you create a database resource
      - correct: true
        option: CloudFormation templates contain resources. One of those resources
          can be a CloudFormation stack. This means that you can nest applications.
      - correct: true
        option: Deleting a CloudFormation stack deletes all of the resources which
          are part of that stack
      - correct: false
        option: Creating a CloudFormation stack creates all of the resources which
          are part of that stack, and overwrites them if they already exist
      - correct: true
        option: Updating a CloudFormation stack creates all of the resources which
          are part of that stack, and overwrites them if they already exist
    question: Select everything true about AWS CloudFormation
  - options:
      - correct: true
        option: Arn
      - correct: false
        option: arn
      - correct: false
        option: ARN
      - correct: true
        option: DomainName
      - correct: false
        option: Region
      - correct: false
        option: BucketAccessControlPolicy
    question: Which of the following are attributes of an AWS::S3::Bucket resource
      which can be accessed using the GetAtt intrinsic function?
  - options:
      - correct: true
        option: '!GetAtt logicalNameOfResource.attributeName'
      - correct: true
        option: 'Fn::GetAtt: [ logicalNameOfResource, attributeName ]'
      - correct: true
        option: '{ "Fn::GetAtt" : [ "logicalNameOfResource", "attributeName" ] }'
      - correct: false
        option: GetAtt("logicalNameOfResource", "attributeName")
      - correct: false
        option: '!Ref logicalNameOfResource.attributeName'
      - correct: false
        option: 'Fn::Ref: [ logicalNameOfResource, attributeName ]'
      - correct: false
        option: '!Ref logicalNameOfResource.attributeName'
      - correct: false
        option: '{ "Ref" : "logicalNameOfResource", "attributeName" }'
    question: Which of the following is a way to access an attribute "attributeName"
      which is a return value from a CloudFormation resource with the logical name
      "logicalNameOfResource"
  - options:
      - correct: false
        option: '!GetAtt MyLambda.Name'
      - correct: false
        option: 'Fn::GetAtt: [ MyLambda, Name ]'
      - correct: false
        option: '{ "Fn::GetAtt" : [ "MyLambda", "Name" ] }'
      - correct: false
        option: GetAtt("logicalNameOfResource", "attributeName")
      - correct: false
        option: '!Ref MyLambda.Name'
      - correct: true
        option: '!Ref MyLambda'
      - correct: false
        option: 'Fn::Ref: [ MyLambda, Name ]'
      - correct: true
        option: 'Ref: MyLambda'
      - correct: true
        option: '{ "Ref" : "logicalName" }'
    question: Which of the following is a way to access the name of an AWS::Lambda::Function
      resource called "MyLambda" which you've defined in your stack
  - options:
      - correct: false
        option: Azure DevOps
      - correct: false
        option: Terraform
      - correct: false
        option: GitHub Actions
      - correct: false
        option: AWS Braket
      - correct: false
        option: Google Cloud Deployment Manager
      - correct: false
        option: Azure Resource Manager
    question: Which of the following are alternatives to CloudFormation, and also
      allow you to provision infrastructure as code?
