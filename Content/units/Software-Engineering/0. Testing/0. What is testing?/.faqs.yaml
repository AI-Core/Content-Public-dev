id: cb7026ee-cbb2-4943-bd9b-06fb9e43cd40
name: Testing
questions:
- answer: 'First, you can check if a variable is from a certain data type using "self.assertIsInstance(variable,
    data_type)"


    If you want to compare it against multiple data types, you can write all the data
    types in parentheses. For example:


    "self.assertisInstance(variable, (data_type_1, data_type_2, data_type_3))"'
  created_at: '2022-02-02 03:39:10'
  id: f7364289-8a4a-4c7f-ade0-b2d959673581
  question: 'I have a unittest that tests the output of a function. The function to
    be tested can return two types of data


    Is there any way to make an assertion such that makes it so that both data types
    are recognised? '
- answer: "The problem is the assertIsInstance used here. A json object in Python\
    \ is a dictionary, there is no json data type, so when trying to check if test_json_data\
    \ is a json object, it doesn't know what this means\n\nInstead, use the following\
    \ code to check if the json file is valid:\n\n\ndef parse(filename):\n    try:\n\
    \        with open(filename) as f:\n            return json.load(f)\n    except\
    \ ValueError as e:\n        print('invalid json: %s' % e)\n        return None"
  created_at: '2022-02-02 03:39:11'
  id: d840d557-b305-4c6b-955d-6c4e99195f9a
  question: "How can I check if the file that I am about to save will have the right\
    \ json format? In my unittest, I have tried this so far, but it's not really working\n\
    \n def test_save_to_json(self):\n        URL= <Some URL>\n        self.scraper.driver.get(URL)\n\
    \        my_dict = self.scraper.get_info() #This returns a dictionary \n     \
    \   with open('data.json', 'w') as fp:\n             test_json_data = json.dump(data,\
    \ fp)\n\n        try:\n            self.assertIsInstance(test_json_data, json)\n\
    \        except ValueError as err:\n            return False\n        return True\
    \ \n        \nBut it is not working as expected. I think that the logic is there,\
    \ but there's something missing. "