name: Big O Notation
questions:
  - question: What are the motivations for using Big O notation?
    options:
      - option: Having a standardize way to measure the CPU needed for running your program
        correct: false
      - option: Having a standardize way to measure the time complexity of an algorithm
        correct: true
      - option: Having a standardize way to measure the space complexity of an algorithm
        correct: true
      - option: Detecting bottlenecks in your program
        correct: true
      - option: All of the above
        correct: false
  - question: Select everything true about Big O
    options:
      - option: It describes the worst case scenario
        correct: true
      - option: It describe the best case scenario
        correct: false
      - option: It describes an average time complexity
        correct: false
      - option: All Big O notations depend on the input size
        correct: false
      - option: Lists and Generators have the same time complexity
        correct: false
      - option: All recursive functions have a time complexity of O(n^2)
        correct: false
  - question: Which of the following are alternatives for measuring time complexity?
    options:
      - option: Big O
        correct: true
      - option: Big W
        correct: false
      - option: Big Theta
        correct: true
      - option: Big Sigma
        correct: false
      - option: Big Omega
        correct: true
      - option: Small o
        correct: true
      - option: Small w
        correct: false
      - option: Small theta
        correct: true
      - option: Small sigma
        correct: false
      - option: Small omega
        correct: true
  - question: What is the average time complexity for finding a key in a default dictionary in Python?
    options:
      - option: O(n)
        correct: false
      - option: O(2n)
        correct: false
      - option: O(logn)
        correct: false
      - option: O(n log n)
        correct: false
      - option: O(n^2)
        correct: false
      - option: O(1)
        correct: true
  - question: You have many different algorithms, and a list of their respective time complexity. Which one is slower?
    options:
      - option: O(1)
        correct: false
      - option: O(log n)
        correct: false
      - option: O(n logn)
        correct: false
      - option: O(n)
        correct: false
      - option: O(n^2)
        correct: false
      - option: None of the above
        correct: true